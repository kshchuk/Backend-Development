// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: transfer.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createTransfer = `-- name: CreateTransfer :one
INSERT INTO public.transfer (
    from_account_id,
    to_account_id,
    amount,
    created_at
) VALUES (
  $1, $2, $3, $4
)
RETURNING transfer_id, from_account_id, to_account_id, amount, created_at
`

type CreateTransferParams struct {
	FromAccountID int64         `json:"from_account_id"`
	ToAccountID   int64         `json:"to_account_id"`
	Amount        sql.NullInt64 `json:"amount"`
	CreatedAt     time.Time     `json:"created_at"`
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfer, error) {
	row := q.queryRow(ctx, q.createTransferStmt, createTransfer,
		arg.FromAccountID,
		arg.ToAccountID,
		arg.Amount,
		arg.CreatedAt,
	)
	var i Transfer
	err := row.Scan(
		&i.TransferID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTransfer = `-- name: DeleteTransfer :exec
DELETE FROM public.transfer
WHERE transfer_id = $1
`

func (q *Queries) DeleteTransfer(ctx context.Context, transferID int64) error {
	_, err := q.exec(ctx, q.deleteTransferStmt, deleteTransfer, transferID)
	return err
}

const getTransfer = `-- name: GetTransfer :one
SELECT transfer_id, from_account_id, to_account_id, amount, created_at FROM public.transfer
WHERE transfer_id = $1 LIMIT 1
`

func (q *Queries) GetTransfer(ctx context.Context, transferID int64) (Transfer, error) {
	row := q.queryRow(ctx, q.getTransferStmt, getTransfer, transferID)
	var i Transfer
	err := row.Scan(
		&i.TransferID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listTransfers = `-- name: ListTransfers :many
SELECT transfer_id, from_account_id, to_account_id, amount, created_at FROM public.transfer
LIMIT $1
OFFSET $2
`

type ListTransfersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTransfers(ctx context.Context, arg ListTransfersParams) ([]Transfer, error) {
	rows, err := q.query(ctx, q.listTransfersStmt, listTransfers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.TransferID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransfer = `-- name: UpdateTransfer :one
UPDATE public.transfer
SET
    from_account_id = $1,
    to_account_id = $2,
    amount = $3,
    created_at = $4
WHERE transfer_id = $5
RETURNING transfer_id, from_account_id, to_account_id, amount, created_at
`

type UpdateTransferParams struct {
	FromAccountID int64         `json:"from_account_id"`
	ToAccountID   int64         `json:"to_account_id"`
	Amount        sql.NullInt64 `json:"amount"`
	CreatedAt     time.Time     `json:"created_at"`
	TransferID    int64         `json:"transfer_id"`
}

func (q *Queries) UpdateTransfer(ctx context.Context, arg UpdateTransferParams) (Transfer, error) {
	row := q.queryRow(ctx, q.updateTransferStmt, updateTransfer,
		arg.FromAccountID,
		arg.ToAccountID,
		arg.Amount,
		arg.CreatedAt,
		arg.TransferID,
	)
	var i Transfer
	err := row.Scan(
		&i.TransferID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}
