// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: entry.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createEntry = `-- name: CreateEntry :one
INSERT INTO public.entry (
    account_id,
    amount,
    created_at
) VALUES (
  $1, $2, $3
)
RETURNING entry_id, account_id, amount, created_at
`

type CreateEntryParams struct {
	AccountID int64         `json:"account_id"`
	Amount    sql.NullInt64 `json:"amount"`
	CreatedAt time.Time     `json:"created_at"`
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (Entry, error) {
	row := q.queryRow(ctx, q.createEntryStmt, createEntry, arg.AccountID, arg.Amount, arg.CreatedAt)
	var i Entry
	err := row.Scan(
		&i.EntryID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const deleteEntry = `-- name: DeleteEntry :exec
DELETE FROM public.entry
WHERE entry_id = $1
`

func (q *Queries) DeleteEntry(ctx context.Context, entryID int64) error {
	_, err := q.exec(ctx, q.deleteEntryStmt, deleteEntry, entryID)
	return err
}

const getEntry = `-- name: GetEntry :one
SELECT entry_id, account_id, amount, created_at FROM public.entry 
WHERE entry_id = $1 LIMIT 1
`

func (q *Queries) GetEntry(ctx context.Context, entryID int64) (Entry, error) {
	row := q.queryRow(ctx, q.getEntryStmt, getEntry, entryID)
	var i Entry
	err := row.Scan(
		&i.EntryID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listEntries = `-- name: ListEntries :many
SELECT entry_id, account_id, amount, created_at FROM public.entry
LIMIT $1
OFFSET $2
`

type ListEntriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListEntries(ctx context.Context, arg ListEntriesParams) ([]Entry, error) {
	rows, err := q.query(ctx, q.listEntriesStmt, listEntries, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Entry{}
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.EntryID,
			&i.AccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEntry = `-- name: UpdateEntry :one
UPDATE public.entry
  set account_id = $2,
    amount = $3,
    created_at = $4
WHERE entry_id = $1
RETURNING entry_id, account_id, amount, created_at
`

type UpdateEntryParams struct {
	EntryID   int64         `json:"entry_id"`
	AccountID int64         `json:"account_id"`
	Amount    sql.NullInt64 `json:"amount"`
	CreatedAt time.Time     `json:"created_at"`
}

func (q *Queries) UpdateEntry(ctx context.Context, arg UpdateEntryParams) (Entry, error) {
	row := q.queryRow(ctx, q.updateEntryStmt, updateEntry,
		arg.EntryID,
		arg.AccountID,
		arg.Amount,
		arg.CreatedAt,
	)
	var i Entry
	err := row.Scan(
		&i.EntryID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}
